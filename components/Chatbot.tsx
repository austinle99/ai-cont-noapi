"use client";
import { useState } from "react";
import { executeChatAction } from "@/app/action";

type Message = {
  role: "user" | "assistant";
  text: string;
  isAction?: boolean;
};

export default function Chatbot() {
  const [msgs, setMsgs] = useState<Message[]>([
    { role: "assistant", text: "ü§ñ **Tr·ª£ l√Ω Container AI s·∫µn s√†ng!**\n\nT√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n‚Ä¢ ƒê·ªÅ xu·∫•t th√¥ng minh sau khi import b√°o c√°o\n‚Ä¢ Th·ª±c hi·ªán h√†nh ƒë·ªông tr·ª±c ti·∫øp (ph√™ duy·ªát ƒë·ªÅ xu·∫•t, gi·∫£i quy·∫øt c·∫£nh b√°o)\n‚Ä¢ Ph√¢n t√≠ch KPI, t·ªìn kho v√† d·ªØ li·ªáu v·∫≠n h√†nh\n‚Ä¢ ƒê∆∞a ra khuy·∫øn ngh·ªã d·ª±a tr√™n ng·ªØ c·∫£nh\n\nG√µ 'tr·ª£ gi√∫p' ƒë·ªÉ xem l·ªánh ho·∫∑c 'g·ª£i √Ω' ƒë·ªÉ nh·∫≠n th√¥ng tin th√¥ng minh!" }
  ]);
  const [input, setInput] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);

  async function send() {
    if (!input.trim() || isProcessing) return;
    
    const userMessage = input;
    const user = { role: "user" as const, text: userMessage };
    setMsgs(m => [...m, user]);
    setInput("");
    setIsProcessing(true);

    try {
      // Use API route instead of server action
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query: userMessage })
      });
      
      if (!response.ok) {
        throw new Error('Chat request failed');
      }
      
      const data = await response.json();
      
      // Check if this is an action that needs to be executed
      if (data.action) {
        // Show the initial response
        setMsgs(m => [...m, { role: "assistant", text: data.message, isAction: true }]);
        
        // Execute the action using server action
        const actionResult = await executeChatAction(data.action, data.actionData);
        
        // Show the action result
        setMsgs(m => [...m, { 
          role: "assistant", 
          text: actionResult.message + (actionResult.success ? "\n\nüí° **M·∫πo:** C√°c thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong h·ªá th·ªëng. Ki·ªÉm tra c√°c trang li√™n quan ƒë·ªÉ xem d·ªØ li·ªáu m·ªõi." : ""),
          isAction: false 
        }]);
      } else {
        // Regular informational response
        setMsgs(m => [...m, { role: "assistant", text: data.message }]);
      }
    } catch (error) {
      console.error("Chat error:", error);
      setMsgs(m => [...m, { 
        role: "assistant", 
        text: "‚ùå Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i." 
      }]);
    }
    
    setIsProcessing(false);
  }

  return (
    <div className="w-80 border-l border-neutral-800 flex flex-col">
      <div className="p-3 border-b border-neutral-800">
        <div className="font-semibold">ü§ñ AI Assistant</div>
        <div className="text-xs text-neutral-400 mt-1">G·ª£i √Ω th√¥ng minh & th·ª±c hi·ªán h√†nh ƒë·ªông</div>
      </div>
      <div className="flex-1 overflow-y-auto p-3 space-y-3">
        {msgs.map((m, i) => (
          <div key={i} className={`${m.role === "user" ? "text-right" : ""}`}>
            <div className={`inline-block max-w-[90%] px-3 py-2 rounded-lg text-sm ${
              m.role === "user" 
                ? "bg-blue-600 text-white" 
                : m.isAction 
                  ? "bg-orange-900/30 border border-orange-700/50 text-orange-200"
                  : "bg-neutral-800 text-neutral-200"
            }`}>
              <div className="whitespace-pre-wrap">{m.text}</div>
            </div>
          </div>
        ))}
        {isProcessing && (
          <div className="flex justify-start">
            <div className="bg-neutral-800 px-3 py-2 rounded-lg text-sm text-neutral-400">
              <div className="flex items-center gap-2">
                <div className="animate-spin w-4 h-4 border-2 border-neutral-600 border-t-neutral-400 rounded-full"></div>
                ƒêang x·ª≠ l√Ω...
              </div>
            </div>
          </div>
        )}
      </div>
      <div className="p-3 border-t border-neutral-800">
        <div className="flex gap-2 mb-2">
          <button 
            onClick={() => setInput("g·ª£i √Ω")}
            className="px-2 py-1 text-xs rounded bg-neutral-800 hover:bg-neutral-700 text-neutral-300"
          >
            üí° G·ª£i √Ω
          </button>
          <button 
            onClick={() => setInput("tr·ª£ gi√∫p")}
            className="px-2 py-1 text-xs rounded bg-neutral-800 hover:bg-neutral-700 text-neutral-300"
          >
            üìñ Tr·ª£ gi√∫p
          </button>
        </div>
        <div className="flex gap-2">
          <input 
            className="flex-1 bg-neutral-900 border border-neutral-700 rounded px-3 py-2 text-sm placeholder-neutral-500"
            value={input} 
            onChange={e => setInput(e.target.value)} 
            onKeyDown={e => e.key === "Enter" && !e.shiftKey && send()}
            placeholder="H·ªèi v·ªÅ KPI, t·ªìn kho, ƒë·ªÅ xu·∫•t..."
            disabled={isProcessing}
          />
          <button 
            onClick={send} 
            disabled={isProcessing || !input.trim()}
            className="px-4 py-2 rounded bg-green-600 hover:bg-green-500 disabled:bg-neutral-700 disabled:cursor-not-allowed text-sm font-medium"
          >
            {isProcessing ? "..." : "G·ª≠i"}
          </button>
        </div>
      </div>
    </div>
  );
}
