generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model KPI {
  id           Int    @id @default(autoincrement())
  utilization  String
  storageCost  String
  dwellTime    String
  approvalRate String
}

model Inventory {
  id    Int    @id @default(autoincrement())
  port  String
  type  String
  stock Int

  @@index([port, type])
}

model Booking {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  origin      String
  destination String
  size        String
  qty         Int
  customer    String?
  status      String?
  // Optimization fields
  containerNo             String?
  emptyLaden              String?
  depot                   String?
  optimizationSuggestion  String?
  optimizationScore       Int?
  optimizationType        String?

  @@index([origin, destination, size])
  @@index([optimizationScore])
  @@index([optimizationType])
}

model Proposal {
  id        String   @id
  route     String
  size      String
  qty       Int
  estCost   Float?
  benefit   Float?
  reason    String?
  status    String
  createdAt DateTime @default(now())
}

model Alert {
  id          String    @id
  level       String
  message     String
  location    String?
  severity    String?
  description String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
}

// ML Training and Learning Models
model MLTrainingData {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  features    Json     // SuggestionFeatures as JSON
  suggestion  Json     // Full suggestion data
  outcome     Float?   // 0-1 score based on user action (null until feedback)
  context     Json     // Business context when suggestion was made
  sessionId   String?  // Group suggestions from same Excel upload
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feedback SuggestionFeedback[]

  @@index([timestamp])
  @@index([sessionId])
}

model SuggestionFeedback {
  id           String   @id @default(cuid())
  suggestionId String   // References MLTrainingData.id
  action       String   // 'accepted', 'rejected', 'modified', 'ignored'
  userId       String?
  timestamp    DateTime @default(now())
  context      Json?    // Additional context about the feedback
  notes        String?  // User notes about why they took this action
  
  trainingData MLTrainingData @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@index([suggestionId])
  @@index([action])
}
